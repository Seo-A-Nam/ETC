

signal 함수는 간단하게 사용할 수 있기는 하지만 시그널을 객체로 보지 않고, 단일 대상으로 본다는 문제점을 가진다. 
sigaction을 사용하면 시그널을 객체로 다룰 수 있는데, 이 객체에는 다음과 같은 것들이 포함된다.
- 시그널 set
- 시그널에 대한 정책
- 시그널 함수
이러한 요소들을 하나의 객체로 볼 경우 분명히 더 쉽게 시그널을 관리할 수 있을 것이다.
리눅스는 이를 객체로 다루기 위해서 sigaction() 함수를 제공한다. 이 함수는 struct sigaction을 이용해서 시그널 객체요소를 다룬다.

#include <signal.h>
int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
- signum : 제어할 시그널의 번호
- act : 시그널을 제어하기 위한 정책을 정의할 수 있다. 이 구조체는 다음과 같이 정의되어있다.
struct sigaction
{
    void (*sa_handler) (int); // sigaction의 signum에 해당되는 시그널이 전달되었을 때 실행 될 시그널 핸들러
    void (*sa_sigaction) (int, siginfo_t *, void *);
    sigset_t sa_mask; // sa_handler에 등록된 시그널 핸들러가 실행되는 동안 블럭되어야하는 시그널마스크
    int sa_flags;
    void (*sa_restorer) (void);
}

sigaction은 시그널을 객체단위로 제어할 수 있음을 알게되었다.
이때 중요한 시그널 정책이, 시그널 핸들러가 수행되는 도중에 발생하는 시그널들을 set으로 묶어서 관리하는 것이다. 이렇게 시그널을 set으로 관리하기 위해서 다음의 함수들을 제공한다.
int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
    -> 현재 set으로 등록된 시그널의 블럭 정책을 변경하기 위해서 사용됨. 블럭 정책에는 다음의 3가지가 있다. 블럭 set에 추가되어있다면, 시그널은 바로 전달되지 않고 handler가 끝날 때까지 블럭된다.
    1. SIG_BLOCK : set에 설정된 시그널셋을 기존 블럭set에 추가한다.
    2. SIG_UNBLOCK : set에 설정된 시그널 셋을 기존 블럭set에서 뺀다.
    3. SIG_SETMASK : set의 시그널셋을 블럭set 정책으로 한다.
int sigpending(sigset_t *set);
// 시그널이 블록된 상태에서 어떤 시그널이 발생해서 블록되었는 지 알 수 있다.
int sigismember(sigset_t *set, int signum); 
// signum이 시그널 set에 포함되어있는 지 확인한다. sigpending과 함께 사용하면, 어떤 시그널에 대해서 블록되었는지를 알고 이에 대한 처리를 할 수 있다.

int siguspend(const sigset_t *mask);
int sigfillset(sigset_t *set);
// 모든 시그널셋의 bit flag를 on으로 한다. 예를 들어 모든 시그널에 대해서 SIG_BLOCK를 적용하길 원한다면, 아래와 같이 하면된다.
    sigset_t sigset, oldset;
    sigfillset(&sigset);
    sigprocmask(SIG_BLOCK, &sigset, &oldset);
int sigaddset(sigset *set, in signum);
// signum 번호를 가지는 시그널을 set에 추가한다.
int sigemptyset(sigset_t *set);
// set을 모두 비운다.
int sigdelset(sigset_t *set, int signo);
// signum 번호를 가지는 시그널을 set에서 지운다.

